%%
%This code is to fusion the lobule-craddock partitions into a single brain
%This code also correct the small-rois generated by the algorithm and fusion them to the 
%nearest roi

clear all
clc

lobules = {'Frontal', 'Parietal', 'Occipital', 'Temporal', 'Insula',  'Subcortical', 'Cerebellum', 'Brain_stem'};
dimscaler = 75; %This is the same dim_scaler than in the code create_craddock_parcel.sh

images4template = dir(['/project/Craddock_partition/' lobules{1} '/*.nii.gz']);
template = load_nifti(['/project/Craddock_partition/' lobules{1} '/' images4template(1).name]);
wholeBrain_partition = zeros(size(template.vol));
wholeBrain_counter = 1;
    
for lob = 1:length(lobules)
    images = dir(['/project/Craddock_partition/' lobules{lob} '/*.nii.gz']);
    for im = 1:length(images)
        img = load_nifti(['/project/Craddock_partition/' lobules{lob} '/' images(im).name]);
        vol = img.vol;

        rois = setdiff(unique(vol),0);

        for r = 1:length(rois)
            loc = ismember(vol, rois(r));
            sizeR(r,1) = sum(loc(:));
        end
        
        sizeR_perIMG{im} = sizeR;
        mean_size(im) = mean(sizeR);
        clear sizeR

    end
    
    size_near_dimscaler = find((mean_size-dimscaler) == min(mean_size-dimscaler));
    sizeRnew = sizeR_perIMG{size_near_dimscaler};
    
    img = load_nifti([lobules{lob} '/' images(size_near_dimscaler).name]);
    vol = img.vol;
    size_minimum = 20; %This is the minimum size we want for a roi in the partition
    small_rois = find(sizeRnew < size_minimum);
    
    newvol = vol;

    %Here we try to find the nearest neighbours first with one voxel of distance and if not, with two.
    %If no neighbours are found, we remove the roi.
    if ~isempty(small_rois)
        for sr = 1:length(small_rois)
            sloc = ismember(newvol, small_rois(sr));
            [x,y,z] = ndgrid(-1:1);
            se = strel(sqrt(x.^2 + y.^2 + z.^2) <=1);
            dilloc = imdilate(sloc,se);
            neighbours = setdiff(newvol(dilloc),[0,small_rois(sr)]);
            if isempty(neighbours)
                [x,y,z] = ndgrid(-2:2);
                se = strel(sqrt(x.^2 + y.^2 + z.^2) <=2);
                dilloc = imdilate(sloc,se);
                neighbours = setdiff(newvol(dilloc),[0,small_rois(sr)]);
            end               
            size_neighbours = sizeRnew(neighbours);
            sort_indices =  sortrows([size_neighbours, neighbours]);
            if isempty(sort_indices)
                newvol(sloc) = 0;
            else
                selected_fusion = sort_indices(1,2);
                newvol(sloc) = selected_fusion;
            end
        end
    end
    
    new_rois = setdiff(unique(newvol),0);
    
    for nr = 1:length(new_rois)
        loc = ismember(newvol, new_rois(nr));
        wholeBrain_partition(loc) = wholeBrain_counter;
        wholeBrain_counter = wholeBrain_counter + 1;
    end
end



template.vol = wholeBrain_partition;
save_nifti(template, ['/project/Craddock_partition/craddock_' int2str(wholeBrain_counter-1) '_2mm.nii.gz']);

for i = 1:wholeBrain_counter-1
    loccheck = ismember(wholeBrain_partition,i);
    siz_rois(i,1) = sum(loccheck(:));
end

dlmwrite('/project/Craddock_partition/partition_roi_sizes.txt', siz_rois);

